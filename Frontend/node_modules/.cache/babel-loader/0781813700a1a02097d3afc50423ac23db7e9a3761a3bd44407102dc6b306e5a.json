{"ast":null,"code":"var _jsxFileName = \"/Users/chynphieyang/MyWebPage/src/components/WorldMap.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport { geoPath } from 'd3-geo';\nimport { feature } from 'topojson-client';\n// import worldData from '../data/world-110m.json'; // Ensure this path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorldMap = () => {\n  _s();\n  const navigate = useNavigate();\n  const handleCountryClick = countryCode => {\n    navigate(`/country/${countryCode}`);\n  };\n  const geoUrl = 'https://unpkg.com/world-atlas@1.1.4/world/110m.json';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n      \"data-tip\": \"\",\n      children: /*#__PURE__*/_jsxDEV(Geographies, {\n        geography: geoUrl,\n        children: ({\n          geographies\n        }) => geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n          geography: geo,\n          onClick: () => handleCountryClick(geo.properties.ISO_A3),\n          style: {\n            default: {\n              fill: \"#D6D6DA\",\n              outline: \"none\"\n            },\n            hover: {\n              fill: \"#F53\",\n              outline: \"none\"\n            },\n            pressed: {\n              fill: \"#E42\",\n              outline: \"none\"\n            }\n          }\n        }, geo.rsmKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(WorldMap, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useNavigate","ComposableMap","Geographies","Geography","geoPath","feature","jsxDEV","_jsxDEV","WorldMap","_s","navigate","handleCountryClick","countryCode","geoUrl","children","geography","geographies","map","geo","onClick","properties","ISO_A3","style","default","fill","outline","hover","pressed","rsmKey","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chynphieyang/MyWebPage/src/components/WorldMap.js"],"sourcesContent":["import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport { geoPath } from 'd3-geo';\nimport { feature } from 'topojson-client';\n// import worldData from '../data/world-110m.json'; // Ensure this path is correct\n\nconst WorldMap = () => {\n  const navigate = useNavigate();\n  const handleCountryClick = (countryCode) => {\n    navigate(`/country/${countryCode}`);\n  };\n\n  const geoUrl = 'https://unpkg.com/world-atlas@1.1.4/world/110m.json';\n\n  return (\n    <div >\n      <ComposableMap data-tip=\"\">\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map((geo) => (\n              <Geography \n                key={geo.rsmKey} \n                geography={geo} \n                onClick={() => handleCountryClick(geo.properties.ISO_A3)} \n                style={{\n                  default: { fill: \"#D6D6DA\", outline: \"none\" },\n                  hover: { fill: \"#F53\", outline: \"none\" },\n                  pressed: { fill: \"#E42\", outline: \"none\" }\n                }}\n              />\n            ))\n          }\n        </Geographies>\n      </ComposableMap>\n    </div>\n  );\n};\n\nexport default WorldMap;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,EAAEC,WAAW,EAAEC,SAAS,QAAQ,mBAAmB;AACzE,SAASC,OAAO,QAAQ,QAAQ;AAChC,SAASC,OAAO,QAAQ,iBAAiB;AACzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,kBAAkB,GAAIC,WAAW,IAAK;IAC1CF,QAAQ,CAAC,YAAYE,WAAW,EAAE,CAAC;EACrC,CAAC;EAED,MAAMC,MAAM,GAAG,qDAAqD;EAEpE,oBACEN,OAAA;IAAAO,QAAA,eACEP,OAAA,CAACN,aAAa;MAAC,YAAS,EAAE;MAAAa,QAAA,eACxBP,OAAA,CAACL,WAAW;QAACa,SAAS,EAAEF,MAAO;QAAAC,QAAA,EAC5BA,CAAC;UAAEE;QAAY,CAAC,KACfA,WAAW,CAACC,GAAG,CAAEC,GAAG,iBAClBX,OAAA,CAACJ,SAAS;UAERY,SAAS,EAAEG,GAAI;UACfC,OAAO,EAAEA,CAAA,KAAMR,kBAAkB,CAACO,GAAG,CAACE,UAAU,CAACC,MAAM,CAAE;UACzDC,KAAK,EAAE;YACLC,OAAO,EAAE;cAAEC,IAAI,EAAE,SAAS;cAAEC,OAAO,EAAE;YAAO,CAAC;YAC7CC,KAAK,EAAE;cAAEF,IAAI,EAAE,MAAM;cAAEC,OAAO,EAAE;YAAO,CAAC;YACxCE,OAAO,EAAE;cAAEH,IAAI,EAAE,MAAM;cAAEC,OAAO,EAAE;YAAO;UAC3C;QAAE,GAPGP,GAAG,CAACU,MAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQhB,CACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV,CAAC;AAACvB,EAAA,CA9BID,QAAQ;EAAA,QACKR,WAAW;AAAA;AAAAiC,EAAA,GADxBzB,QAAQ;AAgCd,eAAeA,QAAQ;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}