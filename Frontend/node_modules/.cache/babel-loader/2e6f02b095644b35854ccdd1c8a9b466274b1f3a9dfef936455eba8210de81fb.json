{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { Platform, Pressable } from 'react-native';\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n/**\n * PlatformPressable provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity to handle platform differences.\n *\n * On Android, you can pass the props of TouchableNativeFeedback.\n * On other platforms, you can pass the props of TouchableOpacity.\n */\nexport function PlatformPressable(_ref) {\n  let {\n    android_ripple,\n    pressColor = 'rgba(0, 0, 0, .32)',\n    pressOpacity,\n    style,\n    ...rest\n  } = _ref;\n  return /*#__PURE__*/React.createElement(Pressable, _extends({\n    android_ripple: ANDROID_SUPPORTS_RIPPLE ? {\n      color: pressColor,\n      ...android_ripple\n    } : undefined,\n    style: _ref2 => {\n      let {\n        pressed\n      } = _ref2;\n      return [{\n        opacity: pressed && !ANDROID_SUPPORTS_RIPPLE ? pressOpacity : 1\n      }, typeof style === 'function' ? style({\n        pressed\n      }) : style];\n    }\n  }, rest));\n}","map":{"version":3,"names":["React","Platform","Pressable","ANDROID_VERSION_LOLLIPOP","ANDROID_SUPPORTS_RIPPLE","OS","Version","PlatformPressable","_ref","android_ripple","pressColor","pressOpacity","style","rest","createElement","_extends","color","undefined","_ref2","pressed","opacity"],"sources":["/Users/chynphieyang/MyWebPage/node_modules/react-native-tab-view/src/PlatformPressable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, Pressable, PressableProps } from 'react-native';\n\nexport type Props = PressableProps & {\n  pressColor?: string;\n  pressOpacity?: number;\n  children: React.ReactNode;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n/**\n * PlatformPressable provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity to handle platform differences.\n *\n * On Android, you can pass the props of TouchableNativeFeedback.\n * On other platforms, you can pass the props of TouchableOpacity.\n */\nexport function PlatformPressable({\n  android_ripple,\n  pressColor = 'rgba(0, 0, 0, .32)',\n  pressOpacity,\n  style,\n  ...rest\n}: Props) {\n  return (\n    <Pressable\n      android_ripple={\n        ANDROID_SUPPORTS_RIPPLE\n          ? { color: pressColor, ...android_ripple }\n          : undefined\n      }\n      style={({ pressed }) => [\n        { opacity: pressed && !ANDROID_SUPPORTS_RIPPLE ? pressOpacity : 1 },\n        typeof style === 'function' ? style({ pressed }) : style,\n      ]}\n      {...rest}\n    />\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,SAAS,QAAwB,cAAc;AAQlE,MAAMC,wBAAwB,GAAG,EAAE;AACnC,MAAMC,uBAAuB,GAC3BH,QAAQ,CAACI,EAAE,KAAK,SAAS,IAAIJ,QAAQ,CAACK,OAAO,IAAIH,wBAAwB;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,iBAAiBA,CAAAC,IAAA,EAMvB;EAAA,IANwB;IAChCC,cAAc;IACdC,UAAU,GAAG,oBAAoB;IACjCC,YAAY;IACZC,KAAK;IACL,GAAGC;EACE,CAAC,GAAAL,IAAA;EACN,oBACER,KAAA,CAAAc,aAAA,CAACZ,SAAS,EAAAa,QAAA;IACRN,cAAc,EACZL,uBAAuB,GACnB;MAAEY,KAAK,EAAEN,UAAU;MAAE,GAAGD;IAAe,CAAC,GACxCQ,SACL;IACDL,KAAK,EAAEM,KAAA;MAAA,IAAC;QAAEC;MAAQ,CAAC,GAAAD,KAAA;MAAA,OAAK,CACtB;QAAEE,OAAO,EAAED,OAAO,IAAI,CAACf,uBAAuB,GAAGO,YAAY,GAAG;MAAE,CAAC,EACnE,OAAOC,KAAK,KAAK,UAAU,GAAGA,KAAK,CAAC;QAAEO;MAAQ,CAAC,CAAC,GAAGP,KAAK,CACzD;IAAA;EAAC,GACEC,IAAI,EACR;AAEN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}